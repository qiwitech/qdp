// Code generated by protoc-gen-tcpgen
// source: gate_service.proto
// DO NOT EDIT!

/*
Package gatepb is a http proxy.
*/

package gatepb

import (
	"context"

	"github.com/gogo/protobuf/proto"
	"github.com/qiwitech/tcprpc"
)

func RegisterProcessorServiceHandlers(s *tcprpc.Server, prefix string, srv ProcessorServiceInterface) {

	s.Handle(prefix+"ProcessTransfer", tcprpc.NewHandler(
		func() proto.Message { return new(TransferRequest) },
		func(ctx context.Context, inp proto.Message) (proto.Message, error) {
			args := inp.(*TransferRequest)
			return srv.ProcessTransfer(ctx, args)
		}))

	s.Handle(prefix+"GetPrevHash", tcprpc.NewHandler(
		func() proto.Message { return new(GetPrevHashRequest) },
		func(ctx context.Context, inp proto.Message) (proto.Message, error) {
			args := inp.(*GetPrevHashRequest)
			return srv.GetPrevHash(ctx, args)
		}))

	s.Handle(prefix+"GetBalance", tcprpc.NewHandler(
		func() proto.Message { return new(GetBalanceRequest) },
		func(ctx context.Context, inp proto.Message) (proto.Message, error) {
			args := inp.(*GetBalanceRequest)
			return srv.GetBalance(ctx, args)
		}))

	s.Handle(prefix+"UpdateSettings", tcprpc.NewHandler(
		func() proto.Message { return new(SettingsRequest) },
		func(ctx context.Context, inp proto.Message) (proto.Message, error) {
			args := inp.(*SettingsRequest)
			return srv.UpdateSettings(ctx, args)
		}))

	s.Handle(prefix+"GetLastSettings", tcprpc.NewHandler(
		func() proto.Message { return new(GetLastSettingsRequest) },
		func(ctx context.Context, inp proto.Message) (proto.Message, error) {
			args := inp.(*GetLastSettingsRequest)
			return srv.GetLastSettings(ctx, args)
		}))

}

type TCPRPCProcessorServiceClient struct {
	cl   *tcprpc.Client
	pref string
}

func NewTCPRPCProcessorServiceClient(cl *tcprpc.Client, pref string) TCPRPCProcessorServiceClient {
	return TCPRPCProcessorServiceClient{
		cl:   cl,
		pref: pref,
	}
}

func (cl TCPRPCProcessorServiceClient) ProcessTransfer(ctx context.Context, args *TransferRequest) (*TransferResponse, error) {
	var resp TransferResponse
	err := cl.cl.Call(ctx, cl.pref+"ProcessTransfer", args, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (cl TCPRPCProcessorServiceClient) GetPrevHash(ctx context.Context, args *GetPrevHashRequest) (*GetPrevHashResponse, error) {
	var resp GetPrevHashResponse
	err := cl.cl.Call(ctx, cl.pref+"GetPrevHash", args, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (cl TCPRPCProcessorServiceClient) GetBalance(ctx context.Context, args *GetBalanceRequest) (*GetBalanceResponse, error) {
	var resp GetBalanceResponse
	err := cl.cl.Call(ctx, cl.pref+"GetBalance", args, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (cl TCPRPCProcessorServiceClient) UpdateSettings(ctx context.Context, args *SettingsRequest) (*SettingsResponse, error) {
	var resp SettingsResponse
	err := cl.cl.Call(ctx, cl.pref+"UpdateSettings", args, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (cl TCPRPCProcessorServiceClient) GetLastSettings(ctx context.Context, args *GetLastSettingsRequest) (*GetLastSettingsResponse, error) {
	var resp GetLastSettingsResponse
	err := cl.cl.Call(ctx, cl.pref+"GetLastSettings", args, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

type ProcessorServiceInterface interface {
	ProcessTransfer(context.Context, *TransferRequest) (*TransferResponse, error)

	GetPrevHash(context.Context, *GetPrevHashRequest) (*GetPrevHashResponse, error)

	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)

	UpdateSettings(context.Context, *SettingsRequest) (*SettingsResponse, error)

	GetLastSettings(context.Context, *GetLastSettingsRequest) (*GetLastSettingsResponse, error)
}
