// Code generated by protoc-gen-tcpgen
// source: api_service.proto
// DO NOT EDIT!

/*
Package apipb is a http proxy.
*/

package apipb

import (
	"context"

	"github.com/gogo/protobuf/proto"
	"github.com/qiwitech/tcprpc"
)

func RegisterAPIServiceHandlers(s *tcprpc.Server, prefix string, srv APIServiceInterface) {

	s.Handle(prefix+"ProcessTransfer", tcprpc.NewHandler(
		func() proto.Message { return new(TransferRequest) },
		func(ctx context.Context, inp proto.Message) (proto.Message, error) {
			args := inp.(*TransferRequest)
			return srv.ProcessTransfer(ctx, args)
		}))

	s.Handle(prefix+"GetPrevHash", tcprpc.NewHandler(
		func() proto.Message { return new(GetPrevHashRequest) },
		func(ctx context.Context, inp proto.Message) (proto.Message, error) {
			args := inp.(*GetPrevHashRequest)
			return srv.GetPrevHash(ctx, args)
		}))

	s.Handle(prefix+"GetBalance", tcprpc.NewHandler(
		func() proto.Message { return new(GetBalanceRequest) },
		func(ctx context.Context, inp proto.Message) (proto.Message, error) {
			args := inp.(*GetBalanceRequest)
			return srv.GetBalance(ctx, args)
		}))

	s.Handle(prefix+"UpdateSettings", tcprpc.NewHandler(
		func() proto.Message { return new(SettingsRequest) },
		func(ctx context.Context, inp proto.Message) (proto.Message, error) {
			args := inp.(*SettingsRequest)
			return srv.UpdateSettings(ctx, args)
		}))

	s.Handle(prefix+"GetLastSettings", tcprpc.NewHandler(
		func() proto.Message { return new(GetLastSettingsRequest) },
		func(ctx context.Context, inp proto.Message) (proto.Message, error) {
			args := inp.(*GetLastSettingsRequest)
			return srv.GetLastSettings(ctx, args)
		}))

	s.Handle(prefix+"GetHistory", tcprpc.NewHandler(
		func() proto.Message { return new(GetHistoryRequest) },
		func(ctx context.Context, inp proto.Message) (proto.Message, error) {
			args := inp.(*GetHistoryRequest)
			return srv.GetHistory(ctx, args)
		}))

	s.Handle(prefix+"GetByMetaKey", tcprpc.NewHandler(
		func() proto.Message { return new(GetByMetaKeyRequest) },
		func(ctx context.Context, inp proto.Message) (proto.Message, error) {
			args := inp.(*GetByMetaKeyRequest)
			return srv.GetByMetaKey(ctx, args)
		}))

	s.Handle(prefix+"SearchMeta", tcprpc.NewHandler(
		func() proto.Message { return new(SearchMetaRequest) },
		func(ctx context.Context, inp proto.Message) (proto.Message, error) {
			args := inp.(*SearchMetaRequest)
			return srv.SearchMeta(ctx, args)
		}))

	s.Handle(prefix+"PutMeta", tcprpc.NewHandler(
		func() proto.Message { return new(PutMetaRequest) },
		func(ctx context.Context, inp proto.Message) (proto.Message, error) {
			args := inp.(*PutMetaRequest)
			return srv.PutMeta(ctx, args)
		}))

}

type TCPRPCAPIServiceClient struct {
	cl   *tcprpc.Client
	pref string
}

func NewTCPRPCAPIServiceClient(cl *tcprpc.Client, pref string) TCPRPCAPIServiceClient {
	return TCPRPCAPIServiceClient{
		cl:   cl,
		pref: pref,
	}
}

func (cl TCPRPCAPIServiceClient) ProcessTransfer(ctx context.Context, args *TransferRequest) (*TransferResponse, error) {
	var resp TransferResponse
	err := cl.cl.Call(ctx, cl.pref+"ProcessTransfer", args, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (cl TCPRPCAPIServiceClient) GetPrevHash(ctx context.Context, args *GetPrevHashRequest) (*GetPrevHashResponse, error) {
	var resp GetPrevHashResponse
	err := cl.cl.Call(ctx, cl.pref+"GetPrevHash", args, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (cl TCPRPCAPIServiceClient) GetBalance(ctx context.Context, args *GetBalanceRequest) (*GetBalanceResponse, error) {
	var resp GetBalanceResponse
	err := cl.cl.Call(ctx, cl.pref+"GetBalance", args, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (cl TCPRPCAPIServiceClient) UpdateSettings(ctx context.Context, args *SettingsRequest) (*SettingsResponse, error) {
	var resp SettingsResponse
	err := cl.cl.Call(ctx, cl.pref+"UpdateSettings", args, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (cl TCPRPCAPIServiceClient) GetLastSettings(ctx context.Context, args *GetLastSettingsRequest) (*GetLastSettingsResponse, error) {
	var resp GetLastSettingsResponse
	err := cl.cl.Call(ctx, cl.pref+"GetLastSettings", args, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (cl TCPRPCAPIServiceClient) GetHistory(ctx context.Context, args *GetHistoryRequest) (*GetHistoryResponse, error) {
	var resp GetHistoryResponse
	err := cl.cl.Call(ctx, cl.pref+"GetHistory", args, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (cl TCPRPCAPIServiceClient) GetByMetaKey(ctx context.Context, args *GetByMetaKeyRequest) (*GetByMetaKeyResponse, error) {
	var resp GetByMetaKeyResponse
	err := cl.cl.Call(ctx, cl.pref+"GetByMetaKey", args, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (cl TCPRPCAPIServiceClient) SearchMeta(ctx context.Context, args *SearchMetaRequest) (*SearchMetaResponse, error) {
	var resp SearchMetaResponse
	err := cl.cl.Call(ctx, cl.pref+"SearchMeta", args, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (cl TCPRPCAPIServiceClient) PutMeta(ctx context.Context, args *PutMetaRequest) (*PutMetaResponse, error) {
	var resp PutMetaResponse
	err := cl.cl.Call(ctx, cl.pref+"PutMeta", args, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}
