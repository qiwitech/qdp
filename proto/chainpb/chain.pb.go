// Code generated by protoc-gen-gogo.
// source: chain.proto
// DO NOT EDIT!

/*
Package chainpb is a generated protocol buffer package.

It is generated from these files:
	chain.proto

It has these top-level messages:
	Txn
	Settings
	TxnID
*/
package chainpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Transaction
type Txn struct {
	// Transaction ID
	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Sender
	Sender uint64 `protobuf:"varint,4,opt,name=sender,proto3" json:"sender,omitempty"`
	// Receiver
	Receiver uint64 `protobuf:"varint,5,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// Amount
	Amount int64 `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`
	// Sender balance after transfer
	Balance int64 `protobuf:"varint,7,opt,name=balance,proto3" json:"balance,omitempty"`
	// Update, when account spends value
	SpentBy uint64 `protobuf:"varint,9,opt,name=spent_by,json=spentBy,proto3" json:"spent_by,omitempty"`
	// Previous transaction hash
	PrevHash []byte `protobuf:"bytes,10,opt,name=prev_hash,json=prevHash,proto3" json:"prev_hash,omitempty"`
	// Account Settings ID
	SettingsId uint64 `protobuf:"varint,12,opt,name=settings_id,json=settingsId,proto3" json:"settings_id,omitempty"`
	// Transaction sign via public key
	Sign []byte `protobuf:"bytes,13,opt,name=sign,proto3" json:"sign,omitempty"`
	// Hash of important fields
	Hash []byte `protobuf:"bytes,21,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *Txn) Reset()                    { *m = Txn{} }
func (m *Txn) String() string            { return proto.CompactTextString(m) }
func (*Txn) ProtoMessage()               {}
func (*Txn) Descriptor() ([]byte, []int) { return fileDescriptorChain, []int{0} }

func (m *Txn) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Txn) GetSender() uint64 {
	if m != nil {
		return m.Sender
	}
	return 0
}

func (m *Txn) GetReceiver() uint64 {
	if m != nil {
		return m.Receiver
	}
	return 0
}

func (m *Txn) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Txn) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *Txn) GetSpentBy() uint64 {
	if m != nil {
		return m.SpentBy
	}
	return 0
}

func (m *Txn) GetPrevHash() []byte {
	if m != nil {
		return m.PrevHash
	}
	return nil
}

func (m *Txn) GetSettingsId() uint64 {
	if m != nil {
		return m.SettingsId
	}
	return 0
}

func (m *Txn) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *Txn) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

// Account Settings transaction
type Settings struct {
	// Account Settings transaction ID
	ID uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Account
	Account uint64 `protobuf:"varint,2,opt,name=account,proto3" json:"account,omitempty"`
	// Previous Settings Hash
	PrevHash []byte `protobuf:"bytes,3,opt,name=prev_hash,json=prevHash,proto3" json:"prev_hash,omitempty"`
	// User Data Hash
	DataHash []byte `protobuf:"bytes,4,opt,name=data_hash,json=dataHash,proto3" json:"data_hash,omitempty"`
	// User Public Key
	PublicKey []byte `protobuf:"bytes,5,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// User request Sign
	Sign []byte `protobuf:"bytes,6,opt,name=sign,proto3" json:"sign,omitempty"`
	// Hash of this transaction
	Hash []byte `protobuf:"bytes,7,opt,name=hash,proto3" json:"hash,omitempty"`
	// Flag to verify transactions sign
	VerifyTransferSign bool `protobuf:"varint,8,opt,name=verify_transfer_sign,json=verifyTransferSign,proto3" json:"verify_transfer_sign,omitempty"`
}

func (m *Settings) Reset()                    { *m = Settings{} }
func (m *Settings) String() string            { return proto.CompactTextString(m) }
func (*Settings) ProtoMessage()               {}
func (*Settings) Descriptor() ([]byte, []int) { return fileDescriptorChain, []int{1} }

func (m *Settings) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Settings) GetAccount() uint64 {
	if m != nil {
		return m.Account
	}
	return 0
}

func (m *Settings) GetPrevHash() []byte {
	if m != nil {
		return m.PrevHash
	}
	return nil
}

func (m *Settings) GetDataHash() []byte {
	if m != nil {
		return m.DataHash
	}
	return nil
}

func (m *Settings) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Settings) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *Settings) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Settings) GetVerifyTransferSign() bool {
	if m != nil {
		return m.VerifyTransferSign
	}
	return false
}

// TxnID is am ID of transaction
type TxnID struct {
	// Account
	Account uint64 `protobuf:"varint,1,opt,name=account,proto3" json:"account,omitempty"`
	// Account ID
	ID uint64 `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *TxnID) Reset()                    { *m = TxnID{} }
func (m *TxnID) String() string            { return proto.CompactTextString(m) }
func (*TxnID) ProtoMessage()               {}
func (*TxnID) Descriptor() ([]byte, []int) { return fileDescriptorChain, []int{2} }

func (m *TxnID) GetAccount() uint64 {
	if m != nil {
		return m.Account
	}
	return 0
}

func (m *TxnID) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func init() {
	proto.RegisterType((*Txn)(nil), "chain.Txn")
	proto.RegisterType((*Settings)(nil), "chain.Settings")
	proto.RegisterType((*TxnID)(nil), "chain.TxnID")
}

func init() { proto.RegisterFile("chain.proto", fileDescriptorChain) }

var fileDescriptorChain = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0x4d, 0x6f, 0xe2, 0x30,
	0x10, 0x95, 0x43, 0xc8, 0xc7, 0xc0, 0xee, 0xc1, 0xda, 0x5d, 0x79, 0x8b, 0xaa, 0x46, 0x9c, 0x72,
	0xaa, 0x5a, 0xf5, 0x1f, 0x20, 0x0e, 0x45, 0xbd, 0x05, 0x4e, 0xbd, 0x44, 0x4e, 0x62, 0x88, 0x55,
	0x6a, 0x22, 0xdb, 0x20, 0xf2, 0x8b, 0xfb, 0x27, 0x7a, 0xa8, 0x32, 0x0e, 0x54, 0xb4, 0xbd, 0xcd,
	0x7b, 0x4f, 0x6f, 0xf4, 0xde, 0x68, 0x60, 0x54, 0xd6, 0x5c, 0xaa, 0xdb, 0x46, 0xef, 0xec, 0x8e,
	0x0e, 0x11, 0x4c, 0xdf, 0x09, 0x0c, 0x56, 0x47, 0x45, 0x7f, 0x83, 0xb7, 0x98, 0x33, 0x92, 0x90,
	0xd4, 0xcf, 0xbc, 0xc5, 0x9c, 0xfe, 0x83, 0xc0, 0x08, 0x55, 0x09, 0xcd, 0x7c, 0xe4, 0x7a, 0x44,
	0xaf, 0x20, 0xd2, 0xa2, 0x14, 0xf2, 0x20, 0x34, 0x1b, 0xa2, 0x72, 0xc6, 0x9d, 0x87, 0xbf, 0xee,
	0xf6, 0xca, 0xb2, 0x20, 0x21, 0xe9, 0x20, 0xeb, 0x11, 0x65, 0x10, 0x16, 0x7c, 0xcb, 0x55, 0x29,
	0x58, 0x88, 0xc2, 0x09, 0xd2, 0xff, 0x10, 0x99, 0x46, 0x28, 0x9b, 0x17, 0x2d, 0x8b, 0x71, 0x5b,
	0x88, 0x78, 0xd6, 0xd2, 0x09, 0xc4, 0x8d, 0x16, 0x87, 0xbc, 0xe6, 0xa6, 0x66, 0x90, 0x90, 0x74,
	0x9c, 0x45, 0x1d, 0xf1, 0xc8, 0x4d, 0x4d, 0x6f, 0x60, 0x64, 0x84, 0xb5, 0x52, 0x6d, 0x4c, 0x2e,
	0x2b, 0x36, 0x46, 0x2b, 0x9c, 0xa8, 0x45, 0x45, 0x29, 0xf8, 0x46, 0x6e, 0x14, 0xfb, 0x85, 0x46,
	0x9c, 0x3b, 0x0e, 0x97, 0xfd, 0x75, 0x5c, 0x37, 0x4f, 0xdf, 0x08, 0x44, 0xcb, 0xde, 0xf6, 0xed,
	0x06, 0x0c, 0x42, 0x5e, 0x96, 0x58, 0xc8, 0x73, 0xe1, 0x7a, 0x78, 0x19, 0x6e, 0xf0, 0x25, 0xdc,
	0x04, 0xe2, 0x8a, 0x5b, 0xee, 0x44, 0xdf, 0x89, 0x1d, 0x81, 0xe2, 0x35, 0x40, 0xb3, 0x2f, 0xb6,
	0xb2, 0xcc, 0x5f, 0x44, 0x8b, 0x17, 0x1c, 0x67, 0xb1, 0x63, 0x9e, 0x44, 0x7b, 0xce, 0x1d, 0xfc,
	0x90, 0x3b, 0xfc, 0xcc, 0x4d, 0xef, 0xe0, 0xcf, 0x41, 0x68, 0xb9, 0x6e, 0x73, 0xab, 0xb9, 0x32,
	0x6b, 0xa1, 0x73, 0xf4, 0x45, 0x09, 0x49, 0xa3, 0x8c, 0x3a, 0x6d, 0xd5, 0x4b, 0x4b, 0xb9, 0x51,
	0xd3, 0x7b, 0x18, 0xae, 0x8e, 0xea, 0xb2, 0x15, 0xb9, 0x6c, 0xe5, 0xfa, 0x7b, 0xa7, 0xfe, 0xb3,
	0xf8, 0x39, 0xc4, 0x27, 0x69, 0x8a, 0x22, 0xc0, 0xa7, 0x79, 0xf8, 0x08, 0x00, 0x00, 0xff, 0xff,
	0xb7, 0x4d, 0xf5, 0xa7, 0x43, 0x02, 0x00, 0x00,
}
