// Code generated by protoc-gen-tcpgen
// source: db_service.proto
// DO NOT EDIT!

/*
Package plutodbpb is a http proxy.
*/

package plutodbpb

import (
	"context"

	"github.com/gogo/protobuf/proto"
	"github.com/qiwitech/tcprpc"
)

func RegisterPlutoDBServiceHandlers(s *tcprpc.Server, prefix string, srv PlutoDBServiceInterface) {

	s.Handle(prefix+"GetHistory", tcprpc.NewHandler(
		func() proto.Message { return new(GetHistoryRequest) },
		func(ctx context.Context, inp proto.Message) (proto.Message, error) {
			args := inp.(*GetHistoryRequest)
			return srv.GetHistory(ctx, args)
		}))

	s.Handle(prefix+"Fetch", tcprpc.NewHandler(
		func() proto.Message { return new(FetchRequest) },
		func(ctx context.Context, inp proto.Message) (proto.Message, error) {
			args := inp.(*FetchRequest)
			return srv.Fetch(ctx, args)
		}))

	s.Handle(prefix+"GetTxnMulti", tcprpc.NewHandler(
		func() proto.Message { return new(GetTxnMultiRequest) },
		func(ctx context.Context, inp proto.Message) (proto.Message, error) {
			args := inp.(*GetTxnMultiRequest)
			return srv.GetTxnMulti(ctx, args)
		}))

}

type TCPRPCPlutoDBServiceClient struct {
	cl   *tcprpc.Client
	pref string
}

func NewTCPRPCPlutoDBServiceClient(cl *tcprpc.Client, pref string) TCPRPCPlutoDBServiceClient {
	return TCPRPCPlutoDBServiceClient{
		cl:   cl,
		pref: pref,
	}
}

func (cl TCPRPCPlutoDBServiceClient) GetHistory(ctx context.Context, args *GetHistoryRequest) (*GetHistoryResponse, error) {
	var resp GetHistoryResponse
	err := cl.cl.Call(ctx, cl.pref+"GetHistory", args, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (cl TCPRPCPlutoDBServiceClient) Fetch(ctx context.Context, args *FetchRequest) (*FetchResponse, error) {
	var resp FetchResponse
	err := cl.cl.Call(ctx, cl.pref+"Fetch", args, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (cl TCPRPCPlutoDBServiceClient) GetTxnMulti(ctx context.Context, args *GetTxnMultiRequest) (*GetTxnMultiResponse, error) {
	var resp GetTxnMultiResponse
	err := cl.cl.Call(ctx, cl.pref+"GetTxnMulti", args, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

type PlutoDBServiceInterface interface {
	GetHistory(context.Context, *GetHistoryRequest) (*GetHistoryResponse, error)

	Fetch(context.Context, *FetchRequest) (*FetchResponse, error)

	GetTxnMulti(context.Context, *GetTxnMultiRequest) (*GetTxnMultiResponse, error)
}
