// Automatically generated by MockGen. DO NOT EDIT!
// Source: pt/pt.go

package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	. "github.com/qiwitech/qdp/pt"
)

// Mock of TransferProcessor interface
type MockTransferProcessor struct {
	ctrl     *gomock.Controller
	recorder *_MockTransferProcessorRecorder
}

// Recorder for MockTransferProcessor (not exported)
type _MockTransferProcessorRecorder struct {
	mock *MockTransferProcessor
}

func NewMockTransferProcessor(ctrl *gomock.Controller) *MockTransferProcessor {
	mock := &MockTransferProcessor{ctrl: ctrl}
	mock.recorder = &_MockTransferProcessorRecorder{mock}
	return mock
}

func (_m *MockTransferProcessor) EXPECT() *_MockTransferProcessorRecorder {
	return _m.recorder
}

func (_m *MockTransferProcessor) ProcessTransfer(ctx context.Context, t Transfer) (TransferResult, error) {
	ret := _m.ctrl.Call(_m, "ProcessTransfer", ctx, t)
	ret0, _ := ret[0].(TransferResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTransferProcessorRecorder) ProcessTransfer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ProcessTransfer", arg0, arg1)
}

func (_m *MockTransferProcessor) GetPrevHash(ctx context.Context, acc AccID) (Hash, error) {
	ret := _m.ctrl.Call(_m, "GetPrevHash", ctx, acc)
	ret0, _ := ret[0].(Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTransferProcessorRecorder) GetPrevHash(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPrevHash", arg0, arg1)
}

func (_m *MockTransferProcessor) GetBalance(ctx context.Context, acc AccID) (int64, error) {
	ret := _m.ctrl.Call(_m, "GetBalance", ctx, acc)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTransferProcessorRecorder) GetBalance(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBalance", arg0, arg1)
}

func (_m *MockTransferProcessor) SetPusher(_param0 Pusher) {
	_m.ctrl.Call(_m, "SetPusher", _param0)
}

func (_mr *_MockTransferProcessorRecorder) SetPusher(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetPusher", arg0)
}

func (_m *MockTransferProcessor) SetPreloader(_param0 Preloader) {
	_m.ctrl.Call(_m, "SetPreloader", _param0)
}

func (_mr *_MockTransferProcessorRecorder) SetPreloader(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetPreloader", arg0)
}

func (_m *MockTransferProcessor) SetSettingsChain(_param0 SettingsChain) {
	_m.ctrl.Call(_m, "SetSettingsChain", _param0)
}

func (_mr *_MockTransferProcessorRecorder) SetSettingsChain(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetSettingsChain", arg0)
}

// Mock of SettingsChain interface
type MockSettingsChain struct {
	ctrl     *gomock.Controller
	recorder *_MockSettingsChainRecorder
}

// Recorder for MockSettingsChain (not exported)
type _MockSettingsChainRecorder struct {
	mock *MockSettingsChain
}

func NewMockSettingsChain(ctrl *gomock.Controller) *MockSettingsChain {
	mock := &MockSettingsChain{ctrl: ctrl}
	mock.recorder = &_MockSettingsChainRecorder{mock}
	return mock
}

func (_m *MockSettingsChain) EXPECT() *_MockSettingsChainRecorder {
	return _m.recorder
}

func (_m *MockSettingsChain) GetLastSettings(accID AccID) *Settings {
	ret := _m.ctrl.Call(_m, "GetLastSettings", accID)
	ret0, _ := ret[0].(*Settings)
	return ret0
}

func (_mr *_MockSettingsChainRecorder) GetLastSettings(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLastSettings", arg0)
}

func (_m *MockSettingsChain) GetLastHash(accID AccID) Hash {
	ret := _m.ctrl.Call(_m, "GetLastHash", accID)
	ret0, _ := ret[0].(Hash)
	return ret0
}

func (_mr *_MockSettingsChainRecorder) GetLastHash(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLastHash", arg0)
}

func (_m *MockSettingsChain) Put(s *Settings) {
	_m.ctrl.Call(_m, "Put", s)
}

func (_mr *_MockSettingsChainRecorder) Put(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0)
}

func (_m *MockSettingsChain) Reset(_param0 AccID) {
	_m.ctrl.Call(_m, "Reset", _param0)
}

func (_mr *_MockSettingsChainRecorder) Reset(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reset", arg0)
}

// Mock of SettingsProcessor interface
type MockSettingsProcessor struct {
	ctrl     *gomock.Controller
	recorder *_MockSettingsProcessorRecorder
}

// Recorder for MockSettingsProcessor (not exported)
type _MockSettingsProcessorRecorder struct {
	mock *MockSettingsProcessor
}

func NewMockSettingsProcessor(ctrl *gomock.Controller) *MockSettingsProcessor {
	mock := &MockSettingsProcessor{ctrl: ctrl}
	mock.recorder = &_MockSettingsProcessorRecorder{mock}
	return mock
}

func (_m *MockSettingsProcessor) EXPECT() *_MockSettingsProcessorRecorder {
	return _m.recorder
}

func (_m *MockSettingsProcessor) ProcessSettings(ctx context.Context, s *Settings) (SettingsResult, error) {
	ret := _m.ctrl.Call(_m, "ProcessSettings", ctx, s)
	ret0, _ := ret[0].(SettingsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSettingsProcessorRecorder) ProcessSettings(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ProcessSettings", arg0, arg1)
}

func (_m *MockSettingsProcessor) GetLastSettings(ctx context.Context, acc AccID) (*Settings, error) {
	ret := _m.ctrl.Call(_m, "GetLastSettings", ctx, acc)
	ret0, _ := ret[0].(*Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSettingsProcessorRecorder) GetLastSettings(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLastSettings", arg0, arg1)
}

// Mock of Chain interface
type MockChain struct {
	ctrl     *gomock.Controller
	recorder *_MockChainRecorder
}

// Recorder for MockChain (not exported)
type _MockChainRecorder struct {
	mock *MockChain
}

func NewMockChain(ctrl *gomock.Controller) *MockChain {
	mock := &MockChain{ctrl: ctrl}
	mock.recorder = &_MockChainRecorder{mock}
	return mock
}

func (_m *MockChain) EXPECT() *_MockChainRecorder {
	return _m.recorder
}

func (_m *MockChain) ListUnspentTxns(accID AccID) []Txn {
	ret := _m.ctrl.Call(_m, "ListUnspentTxns", accID)
	ret0, _ := ret[0].([]Txn)
	return ret0
}

func (_mr *_MockChainRecorder) ListUnspentTxns(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListUnspentTxns", arg0)
}

func (_m *MockChain) CheckTxns(txns []Txn) error {
	ret := _m.ctrl.Call(_m, "CheckTxns", txns)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockChainRecorder) CheckTxns(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckTxns", arg0)
}

func (_m *MockChain) PutTo(accID AccID, txns []Txn) {
	_m.ctrl.Call(_m, "PutTo", accID, txns)
}

func (_mr *_MockChainRecorder) PutTo(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutTo", arg0, arg1)
}

func (_m *MockChain) GetLastHash(accID AccID) Hash {
	ret := _m.ctrl.Call(_m, "GetLastHash", accID)
	ret0, _ := ret[0].(Hash)
	return ret0
}

func (_mr *_MockChainRecorder) GetLastHash(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLastHash", arg0)
}

func (_m *MockChain) GetLastTxn(accID AccID) *Txn {
	ret := _m.ctrl.Call(_m, "GetLastTxn", accID)
	ret0, _ := ret[0].(*Txn)
	return ret0
}

func (_mr *_MockChainRecorder) GetLastTxn(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLastTxn", arg0)
}

func (_m *MockChain) GetBalance(accID AccID) int64 {
	ret := _m.ctrl.Call(_m, "GetBalance", accID)
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockChainRecorder) GetBalance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBalance", arg0)
}

func (_m *MockChain) GetLastNTxns(accID AccID, n int) []Txn {
	ret := _m.ctrl.Call(_m, "GetLastNTxns", accID, n)
	ret0, _ := ret[0].([]Txn)
	return ret0
}

func (_mr *_MockChainRecorder) GetLastNTxns(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLastNTxns", arg0, arg1)
}

func (_m *MockChain) Reset(_param0 AccID) {
	_m.ctrl.Call(_m, "Reset", _param0)
}

func (_mr *_MockChainRecorder) Reset(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reset", arg0)
}

// Mock of BigChain interface
type MockBigChain struct {
	ctrl     *gomock.Controller
	recorder *_MockBigChainRecorder
}

// Recorder for MockBigChain (not exported)
type _MockBigChainRecorder struct {
	mock *MockBigChain
}

func NewMockBigChain(ctrl *gomock.Controller) *MockBigChain {
	mock := &MockBigChain{ctrl: ctrl}
	mock.recorder = &_MockBigChainRecorder{mock}
	return mock
}

func (_m *MockBigChain) EXPECT() *_MockBigChainRecorder {
	return _m.recorder
}

func (_m *MockBigChain) Fetch(ctx context.Context, accID AccID, limit int) ([]Txn, *Settings, error) {
	ret := _m.ctrl.Call(_m, "Fetch", ctx, accID, limit)
	ret0, _ := ret[0].([]Txn)
	ret1, _ := ret[1].(*Settings)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockBigChainRecorder) Fetch(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Fetch", arg0, arg1, arg2)
}

// Mock of Router interface
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *_MockRouterRecorder
}

// Recorder for MockRouter (not exported)
type _MockRouterRecorder struct {
	mock *MockRouter
}

func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &_MockRouterRecorder{mock}
	return mock
}

func (_m *MockRouter) EXPECT() *_MockRouterRecorder {
	return _m.recorder
}

func (_m *MockRouter) GetHostByKey(key string) string {
	ret := _m.ctrl.Call(_m, "GetHostByKey", key)
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockRouterRecorder) GetHostByKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetHostByKey", arg0)
}

func (_m *MockRouter) Nodes() []string {
	ret := _m.ctrl.Call(_m, "Nodes")
	ret0, _ := ret[0].([]string)
	return ret0
}

func (_mr *_MockRouterRecorder) Nodes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Nodes")
}

func (_m *MockRouter) SetNodes(nodes []string) {
	_m.ctrl.Call(_m, "SetNodes", nodes)
}

func (_mr *_MockRouterRecorder) SetNodes(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetNodes", arg0)
}

func (_m *MockRouter) IsSelf(node string) bool {
	ret := _m.ctrl.Call(_m, "IsSelf", node)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockRouterRecorder) IsSelf(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsSelf", arg0)
}

// Mock of Pusher interface
type MockPusher struct {
	ctrl     *gomock.Controller
	recorder *_MockPusherRecorder
}

// Recorder for MockPusher (not exported)
type _MockPusherRecorder struct {
	mock *MockPusher
}

func NewMockPusher(ctrl *gomock.Controller) *MockPusher {
	mock := &MockPusher{ctrl: ctrl}
	mock.recorder = &_MockPusherRecorder{mock}
	return mock
}

func (_m *MockPusher) EXPECT() *_MockPusherRecorder {
	return _m.recorder
}

func (_m *MockPusher) Push(ctx context.Context, txns []Txn) error {
	ret := _m.ctrl.Call(_m, "Push", ctx, txns)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPusherRecorder) Push(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Push", arg0, arg1)
}

// Mock of SettingsPusher interface
type MockSettingsPusher struct {
	ctrl     *gomock.Controller
	recorder *_MockSettingsPusherRecorder
}

// Recorder for MockSettingsPusher (not exported)
type _MockSettingsPusherRecorder struct {
	mock *MockSettingsPusher
}

func NewMockSettingsPusher(ctrl *gomock.Controller) *MockSettingsPusher {
	mock := &MockSettingsPusher{ctrl: ctrl}
	mock.recorder = &_MockSettingsPusherRecorder{mock}
	return mock
}

func (_m *MockSettingsPusher) EXPECT() *_MockSettingsPusherRecorder {
	return _m.recorder
}

func (_m *MockSettingsPusher) PushSettings(ctx context.Context, sett *Settings) error {
	ret := _m.ctrl.Call(_m, "PushSettings", ctx, sett)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSettingsPusherRecorder) PushSettings(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PushSettings", arg0, arg1)
}

// Mock of Preloader interface
type MockPreloader struct {
	ctrl     *gomock.Controller
	recorder *_MockPreloaderRecorder
}

// Recorder for MockPreloader (not exported)
type _MockPreloaderRecorder struct {
	mock *MockPreloader
}

func NewMockPreloader(ctrl *gomock.Controller) *MockPreloader {
	mock := &MockPreloader{ctrl: ctrl}
	mock.recorder = &_MockPreloaderRecorder{mock}
	return mock
}

func (_m *MockPreloader) EXPECT() *_MockPreloaderRecorder {
	return _m.recorder
}

func (_m *MockPreloader) Preload(_param0 context.Context, _param1 AccID) error {
	ret := _m.ctrl.Call(_m, "Preload", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPreloaderRecorder) Preload(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Preload", arg0, arg1)
}

func (_m *MockPreloader) Reset(_param0 context.Context, _param1 AccID) {
	_m.ctrl.Call(_m, "Reset", _param0, _param1)
}

func (_mr *_MockPreloaderRecorder) Reset(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reset", arg0, arg1)
}
